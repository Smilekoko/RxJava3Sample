// Diagram:
// -A--------------B----C-D-------------------E-|---->
//  a---------1s
//                 b---------1s
//                      c---------1s
//                        d---------1s
//                                            e-|---->
// -----------A---------------------D-----------E-|-->

Observable<String> source = Observable.create(emitter -> {
    emitter.onNext("A"); // A和B间隔1500ms，大于指定1000ms，所以输出
    threadSafeSleep(1500);

    emitter.onNext("B"); // B和C间隔500ms，小于指定1000ms，所以不输出
    threadSafeSleep(500);

    emitter.onNext("C"); // C和D间隔250ms，小于指定1000ms，所以不输出
    threadSafeSleep(250);

    emitter.onNext("D"); // D和E间隔2000ms，大于指定1000ms，所以输出
    threadSafeSleep(2000);

    emitter.onNext("E"); // E作为最后一个输出，没有间隔，所以一定会输出
    emitter.onComplete();
});

// 输出A、D、E
setDisposable(doSubscribe(source.subscribeOn(Schedulers.io())
        .throttleWithTimeout(1000, TimeUnit.MILLISECONDS)));